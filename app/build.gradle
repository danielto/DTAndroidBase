apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

// Constants definitions.
def BOOLEAN = "Boolean"
def TRUE = "true"
def FALSE = "false"
def FIELD_DEBUG_MODE = "DEBUG_MODE"
def FIELD_LEAK_CANARY_ENABLED = "LEAK_CANARY_ENABLED"

// TODO Uncomment it when app will be added on Git
//def buildNumber
//buildNumber = Integer.parseInt('git rev-list --all --count'.execute([], project.rootDir).text.trim())
//println 'Using build number ' + buildNumber + ' from commit count based on counting commits to branch master'

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))



android {
  compileSdkVersion compileSdkVersionVar
  buildToolsVersion buildToolsVersionVar

  signingConfigs {
    debug {
      storeFile file(keystoreProperties['storeFileDebug'])
    }

//    config {
//      keyAlias keystoreProperties['keyAlias']
//      keyPassword keystoreProperties['keyPassword']
//      storeFile file(keystoreProperties['storeFile'])
//      storePassword keystoreProperties['storePassword']
//    }
  }

  lintOptions {
    checkReleaseBuilds false
    abortOnError false
  }

  defaultConfig {
    applicationId "cz.tokar.android.app.myarchitecture1"
    minSdkVersion 21
    targetSdkVersion targetSdkVersionVar
    versionCode 1
    versionName "1.0"
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  buildTypes {
    release {
      debuggable false
    }

    debug {
      debuggable true
      applicationIdSuffix ".debug"
      versionNameSuffix '-DEBUG'
    }
  }

  androidExtensions {
    experimental = true
  }

}

dependencies {

  // force to use the same support library version for all dependencies
  configurations.all {
    resolutionStrategy {
      eachDependency { details ->
        // Force all of the primary support libraries to use the same version.
        if (details.requested.group == 'com.android.support') {
          details.useVersion supportVersion
        }
      }
    }
  }
  implementation fileTree(dir: 'libs', include: ['*.jar'])
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

  // support
  implementation "com.android.support:appcompat-v7:$supportVersion"
  implementation "com.android.support:design:$supportVersion"
  implementation "com.android.support:recyclerview-v7:$supportVersion"
  implementation "com.android.support:cardview-v7:${supportVersion}"
  implementation "com.android.support.constraint:constraint-layout:1.1.2"

  // ViewModel and LiveData
  implementation "android.arch.lifecycle:extensions:${archComponents}"
  kapt "android.arch.lifecycle:compiler:${archComponents}"

  // Room
  implementation "android.arch.persistence.room:runtime:${archComponents}"
  kapt "android.arch.persistence.room:compiler:${archComponents}"

  // RETROFIT
  implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
  implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"

  implementation 'com.squareup.okhttp3:okhttp:3.10.0'
  implementation 'com.squareup.okhttp3:logging-interceptor:3.6.0'

  // DAGGER 2
  implementation "com.google.dagger:dagger:$dagger"
  implementation "com.google.dagger:dagger-android-support:$dagger"
  kapt "com.google.dagger:dagger-compiler:$dagger"
  kapt "com.google.dagger:dagger-android-processor:$dagger"


  // PICASSO
  implementation "com.squareup.picasso:picasso:2.71828"
  implementation "com.jakewharton.timber:timber:${timberVersion}"

}
